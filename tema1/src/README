Tema1 - POO

SERBAN Mihnea
321CA

Am implementat doulbe dispatch, detalii in penultimul paragraf, Deflect.

    MAIN
    ####
    Functia principala. Are la dispozitie 2 clase publice, HERO si TERRAIN.
Clasa HERO ofera toate mecanismele necesare interactionarii intre eroi, iar
clasa TERRAIN ofera datele din preajma unui erou (tipul terenului, alt erou).

    RUNDELE
    #######
    Toate rundele se executa dupa cum urmeaza:

    *Se aplica Over Time Effect (DoT sau stun)
    *!Fiecarui erou i se apeleaza o functie de inceput de runda (sa ii zicem
prep())
    *Se citesc miscarile si se incearca executarea lor
    *Fiecare erou se lupta cu vecinul sau

    CLASS HERO
    ##########
    notabil, are 2 abilitati pe care le poate aplica altui erou, o singura data
pe tura datatorita mecanismului de cooldown (un boolean activat la aplicarea
abilitatiilor si dezactivat prin prep()), diferentierea rasei se face prin
atributul race, iar base_hp, hp_per_level si abilitatiile se initializeaza in
constructor in functie de race

    ABILITATI
    #########
    Fiecare Abilitate e implementata cu o clasa finala, sau doua daca are si
efect prelungit.

    Exista 2 interfete pentru Abilitati:
    *InstantAbility : pentru abilitati cu efect instant (se aplica in timuplui
luptei)
    *OverTimeEffect : pentru abilitati cu efect prelungit(se aplica in rundele
ulterioare luptei)
    Obs: eroul are doua abilitati instante pe care le foloseste pe inamici
si un efect prelungit ce actioneaza asupra sa si poate fi schimbat de
abilitatiile instante aplicate pe el.

    Logica legata de modificatorii de teren si de rasa este tinuta in niste
clase speciale cu metode get ce intorc numarul necesar in functie de elementul
discriminant (race/land). Initializarea acestora se face prin constructori
mosteniti.

    Astfel toate abilitatiile care dau damage, mostenesc clasa <Race>Ability
care initializeaza landModifier. Am optat pentru aceasta optiune deoarece
landModifier e specific unei rase, nu unor abilitati.

    Intodeauna <Abilitate> va fi partea ce actioneaza instant a unei abilitati,
iar <Abilitate>OverTime va fi efectul prelungit al acesteia. In cazul in care
exista si dau damage si <Abilitate> si <Abilitate>OverTime, acestea vor mosteni
clasa Basic<Abilitate> care initializeaza raceModifier-ul.

    CLASS PUPPET_HERO
    #################
    mosteneste clasa Hero si retine damage-ul primit

    DEFLECT
    #######
    creeaza o instanta PuppetHero cu hp si hpMax al parintelui si pune
adversarul sa atace papusa, apoi foloseste damage-ul retinut de papusa pentru a
da si el damage. Deoarece Execute si Backstab ar putea da un damage fals pe
papusa a unui vrajitor pe care au fost deja folosite in aceeasi lupta si
deoarece Backstab nu trebuie sa isi modifice contorul cand e folosit pe o
papusa, Backstab si execute trebuie sa se aplice diferit pe Hero si PuppetHero,
de aceea am folosit DOUBLE DISPATCH pentru tratarea acestor cazuri.

    OBSERVATII FINALE
    #################
    Mentionez ca in cazul metodelor cu Javadoc, am pus JavaDoc deoarece mi-a
cerut checkstyle, si din cauza unui bug in checkstyle a trebuit sa fac acele
metode publice:
    https://github.com/checkstyle/checkstyle/issues/5226
